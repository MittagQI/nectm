/*
 * Copyright (c) 2020 Pangeanic SL.
 *
 * This file is part of NEC TM
 * (see https://github.com/shasha79/nectm).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
'use strict'
const path = require('path')
let fs
try {
  fs = require('graceful-fs')
} catch (e) {
  fs = require('fs')
}

function klawSync (dir, opts, ls) {
  function procPath (pathItem) {
    const stat = fs.lstatSync(pathItem)
    const item = {path: pathItem, stats: stat}
    if (stat.isDirectory()) {
      if (opts.filter) {
        if (opts.filter(item) && !opts.nodir) {
          ls.push(item)
          ls = klawSync(pathItem, opts, ls)
        } else {
          if (!opts.noRecurseOnFailedFilter) ls = klawSync(pathItem, opts, ls)
        }
      } else {
        if (!opts.nodir) ls.push(item)
        ls = klawSync(pathItem, opts, ls)
      }
    } else {
      if (opts.filter) {
        if (opts.filter(item) && !opts.nofile) ls.push(item)
      } else {
        if (!opts.nofile) ls.push(item)
      }
    }
  }

  opts = opts || {}
  ls = ls || []
  dir = path.resolve(dir)
  const files = fs.readdirSync(dir)
  for (let i = 0; i < files.length; i += 1) {
    // here dir already resolved, we use string concatenation since
    // showed better performance than path.join() and path.resolve()
    let pathItem
    if (path.sep === '/') pathItem = dir + '/' + files[i]
    else pathItem = dir + '\\' + files[i]
    procPath(pathItem)
  }
  return ls
}

module.exports = klawSync
