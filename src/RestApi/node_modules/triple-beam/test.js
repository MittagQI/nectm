/*
 * Copyright (c) 2020 Pangeanic SL.
 *
 * This file is part of NEC TM
 * (see https://github.com/shasha79/nectm).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const assume = require('assume');
const tripleBeam = require('./');

describe('triple-beam', function () {
  describe('LEVEL constant', function () {
    it('is exposed', function () {
      assume(tripleBeam.LEVEL);
    });

    it('is a Symbol', function () {
      assume(tripleBeam.LEVEL).is.a('symbol');
    });

    it('is not mutable', function () {
      //
      // Assert that the symbol does not change
      // even though the operation does not throw.
      //
      const OVERWRITE = Symbol('overwrite');
      const LEVEL = tripleBeam.LEVEL;

      assume(LEVEL).not.equals(OVERWRITE);
      tripleBeam.LEVEL = OVERWRITE;
      assume(tripleBeam.LEVEL).equals(LEVEL);
    });
  });

  describe('MESSAGE constant', function () {
    it('is exposed', function () {
      assume(tripleBeam.MESSAGE);
    });

    it('is a Symbol', function () {
      assume(tripleBeam.MESSAGE).is.a('symbol');
    });

    it('is not mutable', function () {
      //
      // Assert that the symbol does not change
      // even though the operation does not throw.
      //
      const OVERWRITE = Symbol('overwrite');
      const MESSAGE = tripleBeam.MESSAGE;

      assume(MESSAGE).not.equals(OVERWRITE);
      tripleBeam.MESSAGE = OVERWRITE;
      assume(tripleBeam.MESSAGE).equals(MESSAGE);
    });
  });

  describe('SPLAT constant', function () {
    it('is exposed', function () {
      assume(tripleBeam.SPLAT);
    });

    it('is a Symbol', function () {
      assume(tripleBeam.SPLAT).is.a('symbol');
    });

    it('is not mutable', function () {
      //
      // Assert that the symbol does not change
      // even though the operation does not throw.
      //
      const OVERWRITE = Symbol('overwrite');
      const SPLAT = tripleBeam.SPLAT;

      assume(SPLAT).not.equals(OVERWRITE);
      tripleBeam.SPLAT = OVERWRITE;
      assume(tripleBeam.SPLAT).equals(SPLAT);
    });
  });

  describe('configs constant', function () {
    it('is exposed', function () {
      assume(tripleBeam.configs);
    });

    it('is a Symbol', function () {
      assume(tripleBeam.configs).is.an('Object');
    });

    it('is not mutable', function () {
      //
      // Assert that the object does not change
      // even though the operation does not throw.
      //
      const overwrite = {
        overwrite: 'overwrite'
      };
      const configs = tripleBeam.configs;

      assume(configs).not.equals(overwrite);
      tripleBeam.configs = overwrite;
      assume(tripleBeam.configs).equals(configs);
    });
  });
});
