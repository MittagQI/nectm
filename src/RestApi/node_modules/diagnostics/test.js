/*
 * Copyright (c) 2020 Pangeanic SL.
 *
 * This file is part of NEC TM
 * (see https://github.com/shasha79/nectm).
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
describe('diagnostics', function () {
  'use strict';

  var assume = require('assume')
    , debug = require('./');

  beforeEach(function () {
    process.env.DEBUG = '';
    process.env.DIAGNOSTICS = '';
  });

  it('is exposed as function', function () {
    assume(debug).to.be.a('function');
  });

  it('stringifies objects', function (next) {
    process.env.DEBUG = 'test';

    debug.to({
      write: function write(line) {
        assume(line).to.contain('test');
        assume(line).to.contain('I will be readable { json: 1 }');

        debug.to(process.stdout);
        next();
      }
    });

    debug('test')('I will be readable', { json: 1 });
  });

  describe('.to', function () {
    it('globally overrides the stream', function (next) {
      process.env.DEBUG = 'foo';

      debug.to({
        write: function write(line) {
          assume(line).to.contain('foo');
          assume(line).to.contain('bar');

          debug.to(process.stdout);
          next();
        }
      });

      var log = debug('foo');
      log('bar');
    });
  });
});
